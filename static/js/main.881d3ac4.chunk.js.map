{"version":3,"sources":["app.jsx","ASCII/generate-ascii.js","index.js"],"names":["App","useState","password","setPassword","isNumberPresent","setIsNumberPresent","isUppercasePresent","setIsUppercasePresent","isSymbolPresent","setIsSymbolPresent","value","setValue","passwordRef","useRef","rangeAndNumberValue","e","target","className","type","ref","readOnly","onClick","current","select","document","execCommand","alert","disabled","onSubmit","preventDefault","mdp","lowercase","array","i","push","String","fromCharCode","lowercaseAscii","uppercase","uppercaseAscii","number","numberAscii","symbols","symbolAscii","concat","random","Math","floor","length","join","htmlFor","onChange","min","max","checked","ReactDOM","render","querySelector"],"mappings":"mOA8GeA,EAtGH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAE8BF,oBAAS,GAFvC,mBAETG,EAFS,KAEQC,EAFR,OAGoCJ,oBAAS,GAH7C,mBAGTK,EAHS,KAGWC,EAHX,OAI8BN,oBAAS,GAJvC,mBAITO,EAJS,KAIQC,EAJR,OAKUR,mBAAS,GALnB,mBAKTS,EALS,KAKFC,EALE,KAMVC,EAAcC,iBAAO,MAErBC,EAAsB,SAACC,GAC3B,IAAIL,EAAQK,EAAEC,OAAON,MACrBC,EAASD,IA+CX,OACE,yBAAKO,UAAU,aACb,kDACA,yBAAKA,UAAU,iBACb,2BAAOC,KAAK,OAAOC,IAAKP,EAAaQ,UAAQ,EAACV,MAAOR,IACrD,4BACEmB,QAAS,kBAnCfT,EAAYU,QAAQC,SACpBC,SAASC,YAAY,aACrBC,MAAM,mBAAD,OAAoBxB,EAApB,wCAkCCyB,UAAWzB,GAFb,UAOF,0BAAM0B,SApCW,SAACb,GACpBA,EAAEc,iBACF,IAAIC,EAAM,GACNC,ECpCsB,WAE5B,IADA,IAAMC,EAAQ,GACLC,EAAI,GAAIA,GAAK,IAAKA,IACzBD,EAAME,KAAKC,OAAOC,aAAaH,IAEjC,OAAOD,ED+BWK,GACZC,EC7BsB,WAE5B,IADA,IAAMN,EAAQ,GACLC,EAAI,GAAIA,GAAK,GAAIA,IACxBD,EAAME,KAAKC,OAAOC,aAAaH,IAEjC,OAAOD,EDwBWO,GACZC,EC9CmB,WAEzB,IADA,IAAMR,EAAQ,GACLC,EAAI,GAAIA,GAAK,GAAIA,IACxBD,EAAME,KAAKC,OAAOC,aAAaH,IAEjC,OAAOD,EDyCQS,GACTC,ECvBmB,WAEzB,IADA,IAAMV,EAAQ,GACLC,EAAI,GAAIA,GAAK,GAAIA,IACxBD,EAAME,KAAKC,OAAOC,aAAaH,IAEjC,OAAOD,EDkBSW,GACVX,EAAQD,EACR3B,IACF4B,EAAQA,EAAMY,OAAOJ,IAEnBlC,IACF0B,EAAQA,EAAMY,OAAON,IAEnB9B,IACFwB,EAAQA,EAAMY,OAAOF,IAEvB,IAAK,IAAIT,EAAI,EAAGA,GAAKvB,EAAOuB,IAAK,CAC/B,IAAIY,EAASC,KAAKC,MAAMD,KAAKD,SAAWb,EAAMgB,QAC9ClB,EAAII,KAAKF,EAAMa,IAEjB1C,EAAY2B,EAAImB,KAAK,MAeWhC,UAAU,kBACtC,2BAAOiC,QAAQ,IAAf,yBACA,6BACE,2BACEC,SAAUrC,EACVJ,MAAOA,EACPQ,KAAK,QACLkC,IAAI,IACJC,IAAI,OAEN,2BACEF,SAAUrC,EACVJ,MAAOA,EACPQ,KAAK,SACLkC,IAAI,IACJC,IAAI,QAGR,2BAAOH,QAAQ,IAAf,uBACA,2BAAOC,SA3EW,SAACpC,GACvBA,EAAEC,OAAOsC,QAAUjD,GAAmB,GAAQA,GAAmB,IA0E3Ba,KAAK,aAEvC,wDACA,2BAAOiC,SA1Ec,SAACpC,GAC1BA,EAAEC,OAAOsC,QACL/C,GAAsB,GACtBA,GAAsB,IAuEeW,KAAK,aAE1C,2BAAOgC,QAAQ,IAAf,kCACA,2BAAOC,SAvEW,SAACpC,GACvBA,EAAEC,OAAOsC,QAAU7C,GAAmB,GAAQA,GAAmB,IAsE3BS,KAAK,aAEvC,wDElGRqC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASiC,cAAc,W","file":"static/js/main.881d3ac4.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport {\n  numberAscii,\n  lowercaseAscii,\n  uppercaseAscii,\n  symbolAscii,\n} from \"./ASCII/generate-ascii\";\n\nconst App = () => {\n  const [password, setPassword] = useState(\"\");\n  const [isNumberPresent, setIsNumberPresent] = useState(false);\n  const [isUppercasePresent, setIsUppercasePresent] = useState(false);\n  const [isSymbolPresent, setIsSymbolPresent] = useState(false);\n  const [value, setValue] = useState(0);\n  const passwordRef = useRef(null);\n\n  const rangeAndNumberValue = (e) => {\n    let value = e.target.value;\n    setValue(value);\n  };\n\n  const isNumberChecked = (e) => {\n    e.target.checked ? setIsNumberPresent(true) : setIsNumberPresent(false);\n  };\n\n  const isUppercaseChecked = (e) => {\n    e.target.checked\n      ? setIsUppercasePresent(true)\n      : setIsUppercasePresent(false);\n  };\n\n  const isSymbolChecked = (e) => {\n    e.target.checked ? setIsSymbolPresent(true) : setIsSymbolPresent(false);\n  };\n\n  const onClickCopy = () => {\n    passwordRef.current.select();\n    document.execCommand(\"copy\");\n    alert(`your password : ${password} has been copied in your clipboard`);\n  };\n\n  const onSubmitForm = (e) => {\n    e.preventDefault();\n    let mdp = [];\n    let lowercase = lowercaseAscii();\n    let uppercase = uppercaseAscii();\n    let number = numberAscii();\n    let symbols = symbolAscii();\n    let array = lowercase;\n    if (isNumberPresent) {\n      array = array.concat(number);\n    }\n    if (isUppercasePresent) {\n      array = array.concat(uppercase);\n    }\n    if (isSymbolPresent) {\n      array = array.concat(symbols);\n    }\n    for (let i = 1; i <= value; i++) {\n      let random = Math.floor(Math.random() * array.length);\n      mdp.push(array[random]);\n    }\n    setPassword(mdp.join(\"\"));\n  };\n\n  return (\n    <div className=\"container\">\n      <h2>Password generator</h2>\n      <div className=\"mdp-container\">\n        <input type=\"text\" ref={passwordRef} readOnly value={password} />\n        <button\n          onClick={() => onClickCopy()}\n          disabled={!password ? true : false}\n        >\n          Copy!\n        </button>\n      </div>\n      <form onSubmit={onSubmitForm} className=\"form-container\">\n        <label htmlFor=\"\">Numbers of characters</label>\n        <div>\n          <input\n            onChange={rangeAndNumberValue}\n            value={value}\n            type=\"range\"\n            min=\"1\"\n            max=\"50\"\n          />\n          <input\n            onChange={rangeAndNumberValue}\n            value={value}\n            type=\"number\"\n            min=\"1\"\n            max=\"50\"\n          />\n        </div>\n        <label htmlFor=\"\">Include Numbers 0-9</label>\n        <input onChange={isNumberChecked} type=\"checkbox\" />\n\n        <label>Include Uppercase A-Z</label>\n        <input onChange={isUppercaseChecked} type=\"checkbox\" />\n\n        <label htmlFor=\"\">Include Symbols (!?:/_\\, ...)</label>\n        <input onChange={isSymbolChecked} type=\"checkbox\" />\n\n        <button>Generate password</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","export const numberAscii = () => {\n  const array = [];\n  for (let i = 49; i <= 57; i++) {\n    array.push(String.fromCharCode(i));\n  }\n  return array;\n};\n\nexport const lowercaseAscii = () => {\n  const array = [];\n  for (let i = 97; i <= 122; i++) {\n    array.push(String.fromCharCode(i));\n  }\n  return array;\n};\n\nexport const uppercaseAscii = () => {\n  const array = [];\n  for (let i = 65; i <= 90; i++) {\n    array.push(String.fromCharCode(i));\n  }\n  return array;\n};\n\nexport const symbolAscii = () => {\n  const array = [];\n  for (let i = 33; i <= 47; i++) {\n    array.push(String.fromCharCode(i));\n  }\n  return array;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"normalize.css\"\nimport './style/style.scss'\nimport App from './app';\n\nReactDOM.render(<App />, document.querySelector('#root'))\n\n"],"sourceRoot":""}